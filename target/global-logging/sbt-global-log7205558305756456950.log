[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\rdubey\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\rdubey\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_332)
[debug]       Load.loadUnit: plugins took 580.8346ms
[debug]       Load.loadUnit: defsScala took 1.3403ms
[debug] [Loading] Scanning directory C:\Users\rdubey\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rdubey\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 136.9879 ms
[debug]           Load.resolveProject(global-plugins) took 265.7113ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\rdubey\.sbt\1.0\plugins, plugins: List(<none>))) took 539.8475ms
[debug] [Loading] Done in C:\Users\rdubey\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 853.5031ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.9609ms
[debug]     Load.loadUnit(file:/C:/Users/rdubey/.sbt/1.0/plugins/, ...) took 1493.0213ms
[debug]   Load.apply: load took 2727.2326ms
[debug]   Load.apply: resolveProjects took 28.7514ms
[debug]   Load.apply: finalTransforms took 417.4069ms
[debug]   Load.apply: config.delegates took 46.6171ms
[debug]   Load.apply: Def.make(settings)... took 2356.7171ms
[debug]   Load.apply: structureIndex took 319.1995ms
[debug]   Load.apply: mkStreams took 5.9683ms
[info] loading global plugins from C:\Users\rdubey\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 12380.0263ms
[debug]           Load.loadUnit: plugins took 213.2611ms
[debug]           Load.loadUnit: defsScala took 0.0188ms
[debug] [Loading] Scanning directory C:\GitProject\ComplexTypesDemo\project
[debug]             Load.loadUnit: mkEval took 45.0042ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.8682 ms
[info] loading settings for project complextypesdemo-build from idea.sbt ...
[debug]               Load.resolveProject(complextypesdemo-build) took 23.1406ms
[debug]             Load.loadTransitive: finalizeProject(Project(id complextypesdemo-build, base: C:\GitProject\ComplexTypesDemo\project, plugins: List(<none>))) took 46.0881ms
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo\project, returning: (complextypesdemo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 10387.6801ms
[debug]           Load.loadUnit: cleanEvalClasses took 39.642ms
[debug]         Load.loadUnit(file:/C:/GitProject/ComplexTypesDemo/project/, ...) took 10643.6777ms
[debug]       Load.apply: load took 10649.0854ms
[debug]       Load.apply: resolveProjects took 0.4361ms
[debug]       Load.apply: finalTransforms took 43.0517ms
[debug]       Load.apply: config.delegates took 9.7077ms
[debug]       Load.apply: Def.make(settings)... took 444.3037ms
[debug]       Load.apply: structureIndex took 95.8343ms
[debug]       Load.apply: mkStreams took 0.0042ms
[info] loading project definition from C:\GitProject\ComplexTypesDemo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 13600.8577ms
[debug]     Load.loadUnit: defsScala took 0.01ms
[debug] [Loading] Scanning directory C:\GitProject\ComplexTypesDemo
[debug]       Load.loadUnit: mkEval took 1.8748ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 58.0608 ms
[info] loading settings for project complextypesdemo from build.sbt ...
[debug]         Load.resolveProject(complextypesdemo) took 82.8212ms
[debug]       Load.loadTransitive: finalizeProject(Project(id complextypesdemo, base: C:\GitProject\ComplexTypesDemo, plugins: List(<none>))) took 147.2382ms
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo, returning: (complextypesdemo)
[debug]     Load.loadUnit: loadedProjectsRaw took 921.0155ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.0145ms
[debug]   Load.loadUnit(file:/C:/GitProject/ComplexTypesDemo/, ...) took 14537.2672ms
[debug] Load.apply: load took 14542.9519ms
[debug] Load.apply: resolveProjects took 0.1975ms
[debug] Load.apply: finalTransforms took 166.5297ms
[debug] Load.apply: config.delegates took 1.9179ms
[debug] Load.apply: Def.make(settings)... took 1322.6684ms
[debug] Load.apply: structureIndex took 254.2654ms
[debug] Load.apply: mkStreams took 0.006ms
[info] set current project to ComplexTypesDemo (in build file:/C:/GitProject/ComplexTypesDemo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53221 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53221, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ComplexTypesDemo (in build file:/C:/GitProject/ComplexTypesDemo/)
[debug] > Exec(idea-shell, None, None)
