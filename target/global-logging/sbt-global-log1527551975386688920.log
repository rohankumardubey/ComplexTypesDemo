[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\rdubey\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\rdubey\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_332)
[debug]       Load.loadUnit: plugins took 448.4336ms
[debug]       Load.loadUnit: defsScala took 0.7921ms
[debug] [Loading] Scanning directory C:\Users\rdubey\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rdubey\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 103.2895 ms
[debug]           Load.resolveProject(global-plugins) took 282.1994ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\rdubey\.sbt\1.0\plugins, plugins: List(<none>))) took 496.7265ms
[debug] [Loading] Done in C:\Users\rdubey\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 622.3717ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6066ms
[debug]     Load.loadUnit(file:/C:/Users/rdubey/.sbt/1.0/plugins/, ...) took 1138.6497ms
[debug]   Load.apply: load took 1772.7739ms
[debug]   Load.apply: resolveProjects took 22.9468ms
[debug]   Load.apply: finalTransforms took 187.1844ms
[debug]   Load.apply: config.delegates took 60.8382ms
[debug]   Load.apply: Def.make(settings)... took 1167.9353ms
[debug]   Load.apply: structureIndex took 332.4125ms
[debug]   Load.apply: mkStreams took 9.5112ms
[info] loading global plugins from C:\Users\rdubey\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8965.9599ms
[debug]           Load.loadUnit: plugins took 106.4248ms
[debug]           Load.loadUnit: defsScala took 0.0108ms
[debug] [Loading] Scanning directory C:\GitProject\ComplexTypesDemo\project
[debug]             Load.loadUnit: mkEval took 24.462ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.8863 ms
[info] loading settings for project complextypesdemo-build from idea.sbt ...
[debug]               Load.resolveProject(complextypesdemo-build) took 6.9526ms
[debug]             Load.loadTransitive: finalizeProject(Project(id complextypesdemo-build, base: C:\GitProject\ComplexTypesDemo\project, plugins: List(<none>))) took 17.526ms
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo\project, returning: (complextypesdemo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 11134.9535ms
[debug]           Load.loadUnit: cleanEvalClasses took 15.4432ms
[debug]         Load.loadUnit(file:/C:/GitProject/ComplexTypesDemo/project/, ...) took 11260.4136ms
[debug]       Load.apply: load took 11265.0519ms
[debug]       Load.apply: resolveProjects took 0.3611ms
[debug]       Load.apply: finalTransforms took 27.2968ms
[debug]       Load.apply: config.delegates took 1.1793ms
[debug]       Load.apply: Def.make(settings)... took 433.8348ms
[debug]       Load.apply: structureIndex took 104.9834ms
[debug]       Load.apply: mkStreams took 0.0058ms
[info] loading project definition from C:\GitProject\ComplexTypesDemo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 18334.7951ms
[debug]     Load.loadUnit: defsScala took 0.0079ms
[debug] [Loading] Scanning directory C:\GitProject\ComplexTypesDemo
[debug]       Load.loadUnit: mkEval took 0.8665ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.9069 ms
[info] loading settings for project complextypesdemo from build.sbt ...
[debug]         Load.resolveProject(complextypesdemo) took 52.4318ms
[debug]       Load.loadTransitive: finalizeProject(Project(id complextypesdemo, base: C:\GitProject\ComplexTypesDemo, plugins: List(<none>))) took 61.7468ms
[debug] [Loading] Done in C:\GitProject\ComplexTypesDemo, returning: (complextypesdemo)
[debug]     Load.loadUnit: loadedProjectsRaw took 4497.2808ms
[debug]     Load.loadUnit: cleanEvalClasses took 50.3291ms
[debug]   Load.loadUnit(file:/C:/GitProject/ComplexTypesDemo/, ...) took 22884.4034ms
[debug] Load.apply: load took 22888.5907ms
[debug] Load.apply: resolveProjects took 0.2123ms
[debug] Load.apply: finalTransforms took 59.4804ms
[debug] Load.apply: config.delegates took 0.8711ms
[debug] Load.apply: Def.make(settings)... took 227.509ms
[debug] Load.apply: structureIndex took 63.6468ms
[debug] Load.apply: mkStreams took 0.0046ms
[info] set current project to ComplexTypesDemo (in build file:/C:/GitProject/ComplexTypesDemo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64032 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64032, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ComplexTypesDemo (in build file:/C:/GitProject/ComplexTypesDemo/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
